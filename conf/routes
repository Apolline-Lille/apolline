# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#Swagger
GET         /swagger                                          controllers.Application.swagger
GET         /api-docs.json                                    controllers.ApiHelpController.getResources
GET         /api-docs.json/user                               controllers.ApiHelpController.getResource(path = "/user")
GET         /api-docs.json/typeSensor                         controllers.ApiHelpController.getResource(path = "/typeSensor")
GET         /api-docs.json/sensors                            controllers.ApiHelpController.getResource(path = "/sensors")
GET         /api-docs.json/typeCards                          controllers.ApiHelpController.getResource(path = "/typeCards")
GET         /api-docs.json/card                               controllers.ApiHelpController.getResource(path = "/card")
GET         /api-docs.json/module                             controllers.ApiHelpController.getResource(path = "/module")
GET         /api-docs.json/campaign                           controllers.ApiHelpController.getResource(path = "/campaign")

#Dashboard page
GET         /                                                 controllers.Dashboard.index

#User page
GET         /login                                            controllers.UserManager.loginPage
POST        /login                                            controllers.UserManager.loginSubmit
GET         /disconnect                                       controllers.UserManager.disconnect
GET         /register                                         controllers.UserManager.addUserPage
POST        /register                                         controllers.UserManager.addUserSubmit

#Sensor page
GET         /inventary/sensors                                controllers.TypeSensorManager.inventary(sort:String ?= "",stock:String ?= "")
GET         /inventary/sensors/type                           controllers.TypeSensorManager.typePage
POST        /inventary/sensors/type                           controllers.TypeSensorManager.typeInsert
GET         /inventary/sensors/:id                            controllers.SensorManager.inventary(id:String,sort:String ?= "id",sens:Int ?= 1)
GET         /inventary/sensors/:id/update                     controllers.TypeSensorManager.typeUpdatePage(id:String)
POST        /inventary/sensors/:id/update                     controllers.TypeSensorManager.typeUpdate(id:String)
GET         /inventary/sensors/:id/delete                     controllers.TypeSensorManager.delete(id:String)
GET         /inventary/sensors/:id/sensor                     controllers.SensorManager.sensorPage(id:String)
POST        /inventary/sensors/:id/sensor                     controllers.SensorManager.sensorInsert(id:String)
GET         /inventary/sensors/:id/:id2                       controllers.SensorManager.sensorUpdatePage(id:String,id2:String)
POST        /inventary/sensors/:id/:id2                       controllers.SensorManager.sensorUpdate(id:String,id2:String)
GET         /inventary/sensors/:id/:id2/delete                controllers.SensorManager.delete(id:String,id2:String)
GET         /inventary/sensors/:id/:id2/clone                 controllers.SensorManager.sensorClonePage(id:String,id2:String)

#Cards page
GET         /inventary/cards                                  controllers.TypeCardsManager.inventary(sort:String ?= "", stock:String ?= "")
GET         /inventary/cards/type                             controllers.TypeCardsManager.typePage
POST        /inventary/cards/type                             controllers.TypeCardsManager.typeInsert
GET         /inventary/cards/:id/update                       controllers.TypeCardsManager.typeUpdatePage(id:String)
POST        /inventary/cards/:id/update                       controllers.TypeCardsManager.typeUpdate(id:String)
GET         /inventary/cards/:id/delete                       controllers.TypeCardsManager.delete(id:String)
GET         /inventary/cards/:id                              controllers.CardsManager.inventary(id:String,sort:String ?= "id",sens:Int ?= 1)
GET         /inventary/cards/:id/card                         controllers.CardsManager.cardPage(id:String)
POST        /inventary/cards/:id/card                         controllers.CardsManager.cardInsert(id:String)
GET         /inventary/cards/:id/:id2                         controllers.CardsManager.cardUpdatePage(id:String,id2:String)
POST        /inventary/cards/:id/:id2                         controllers.CardsManager.cardUpdate(id:String,id2:String)
GET         /inventary/cards/:id/:id2/delete                  controllers.CardsManager.delete(id:String,id2:String)
GET         /inventary/cards/:id/:id2/clone                   controllers.CardsManager.cardClonePage(id:String,id2:String)

#Module page
GET         /inventary/modules                                controllers.ModuleManager.inventary(filtre:String ?= "")
GET         /inventary/modules/form                           controllers.ModuleManager.formGeneralAdd()
POST        /inventary/modules/form                           controllers.ModuleManager.addInformation()
GET         /inventary/modules/form/update                    controllers.ModuleManager.formUpdate()
GET         /inventary/modules/form/typeCards                 controllers.ModuleManager.formTypeCards(filtre:String ?= "")
GET         /inventary/modules/form/cards/:id/delete          controllers.ModuleManager.deleteCards(id)
GET         /inventary/modules/form/cards/:id                 controllers.ModuleManager.formCards(id,sort:String ?= "id",sens:Int ?= 1)
POST        /inventary/modules/form/cards/:id                 controllers.ModuleManager.addCards(id)
GET         /inventary/modules/form/typeSensors               controllers.ModuleManager.formTypeSensors(filtre:String ?= "")
GET         /inventary/modules/form/sensors/:id/delete        controllers.ModuleManager.deleteSensors(id)
GET         /inventary/modules/form/sensors/:id               controllers.ModuleManager.formSensors(id,sort:String ?= "id",sens:Int ?= 1)
POST        /inventary/modules/form/sensors/:id               controllers.ModuleManager.addSensors(id)
GET         /inventary/modules/form/validate                  controllers.ModuleManager.validate()
POST        /inventary/modules/form/validate                  controllers.ModuleManager.insertModule()
GET         /inventary/modules/form/:id                       controllers.ModuleManager.formGeneralUpdate(id)
GET         /inventary/modules/:id/delete                     controllers.ModuleManager.deleteModule(id)
GET         /inventary/modules/:id                            controllers.ModuleManager.moreInformation(id)

#Campaign page
GET         /campaigns                                        controllers.CampagneManager.listCampaign()
GET         /campaigns/campaign                               controllers.CampagneManager.addCampaign()
POST        /campaigns/campaign                               controllers.CampagneManager.insertCampaign()
GET         /campaigns/campaign/:id/update                    controllers.CampagneManager.updateCampaignPage(id)
POST        /campaigns/campaign/:id/update                    controllers.CampagneManager.updateCampaign(id)
GET         /campaigns/campaign/:id                           controllers.ConditionsManager.listConditions(id)
GET         /campaigns/campaign/:id/form                      controllers.ConditionsManager.formGeneral(id)
POST        /campaigns/campaign/:id/form                        controllers.ConditionsManager.addGeneralInformation(id)
GET         /campaigns/campaign/:id/form/module               controllers.ConditionsManager.formModule(id,filtre ?= "")

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                     controllers.Assets.at(path="/public", file)

GET         /api/*file                                        controllers.Assets.at(path="/public/api",file)

GET         /*path                                            controllers.Dashboard.notFound(path)
